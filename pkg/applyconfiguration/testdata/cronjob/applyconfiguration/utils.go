// Code generated by applyconfiguration. DO NOT EDIT.

package applyconfiguration

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
	cronjob "sigs.k8s.io/controller-tools/pkg/applyconfiguration/testdata/cronjob"
	internal "sigs.k8s.io/controller-tools/pkg/applyconfiguration/testdata/cronjob/applyconfiguration/internal"
	testdatacronjob "sigs.k8s.io/controller-tools/pkg/applyconfiguration/testdata/cronjob/applyconfiguration/testdata/cronjob"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=testdata, Version=cronjob
	case cronjob.SchemeGroupVersion.WithKind("AssociativeType"):
		return &testdatacronjob.AssociativeTypeApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("ContainsNestedMap"):
		return &testdatacronjob.ContainsNestedMapApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("CronJob"):
		return &testdatacronjob.CronJobApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("CronJobSpec"):
		return &testdatacronjob.CronJobSpecApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("CronJobStatus"):
		return &testdatacronjob.CronJobStatusApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("Duration"):
		return &testdatacronjob.DurationApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("EmbeddedStruct"):
		return &testdatacronjob.EmbeddedStructApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("EmpiableObject"):
		return &testdatacronjob.EmpiableObjectApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("ExportedStruct"):
		return &testdatacronjob.ExportedStructApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("JustNestedObject"):
		return &testdatacronjob.JustNestedObjectApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("MinMaxObject"):
		return &testdatacronjob.MinMaxObjectApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("NestedObject"):
		return &testdatacronjob.NestedObjectApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("NestedStructWithSeveralFields"):
		return &testdatacronjob.NestedStructWithSeveralFieldsApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("Preserved"):
		return &testdatacronjob.PreservedApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("RootObject"):
		return &testdatacronjob.RootObjectApplyConfiguration{}
	case cronjob.SchemeGroupVersion.WithKind("UnexportedStruct"):
		return &testdatacronjob.unexportedStructApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
