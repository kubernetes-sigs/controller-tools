//go:build !ignore_autogenerated

/*
Copyright2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by helpgen. DO NOT EDIT.

package markers

import (
	"sigs.k8s.io/controller-tools/pkg/markers"
)

func (gaugeMarker) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "Metric type Gauge",
		DetailedHelp: markers.DetailedHelp{
			Summary: "defines a Gauge metric and uses the implicit path to the field joined by the provided JSONPath as path for the metric configuration.",
			Details: "Gauge is a metric which targets a Path that may be a single value, array, or object.\nArrays and objects will generate a metric per element and requre ValueFrom to be set.\nRef: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#gauge",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "specifies the Name of the metric.",
				Details: "",
			},
			"MetricHelp": {
				Summary: "specifies the help text for the metric.",
				Details: "",
			},
			"LabelsFromPath": {
				Summary: "specifies additional labels where the value is taken from the given JSONPath.",
				Details: "",
			},
			"JSONPath": {
				Summary: "specifies the relative path from this marker.",
				Details: "Note: This field get's appended to the path field in the custom resource configuration.",
			},
			"ValueFrom": {
				Summary: "specifies the JSONPath to a numeric field that will be the metric value.",
				Details: "",
			},
			"LabelFromKey": {
				Summary: "specifies a label which will be added to the metric having the object's key as value.",
				Details: "",
			},
			"NilIsZero": {
				Summary: "specifies to treat a not-existing field as zero value.",
				Details: "",
			},
		},
	}
}

func (gvkMarker) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "Metrics",
		DetailedHelp: markers.DetailedHelp{
			Summary: "enables the creation of a custom resource configuration entry and uses the given prefix for the metrics if configured.",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"NamePrefix": {
				Summary: "specifies the prefix for all metrics of this resource.",
				Details: "Note: This field directly maps to the metricNamePrefix field in the resource's custom resource configuration.",
			},
		},
	}
}

func (infoMarker) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "Metric type Info",
		DetailedHelp: markers.DetailedHelp{
			Summary: "defines a Info metric and uses the implicit path to the field as path for the metric configuration.",
			Details: "Info is a metric which is used to expose textual information.\nRef: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#info",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "specifies the Name of the metric.",
				Details: "",
			},
			"MetricHelp": {
				Summary: "specifies the help text for the metric.",
				Details: "",
			},
			"LabelsFromPath": {
				Summary: "specifies additional labels where the value is taken from the given JSONPath.",
				Details: "",
			},
			"JSONPath": {
				Summary: "specifies the relative path from this marker.",
				Details: "Note: This field get's appended to the path field in the custom resource configuration.",
			},
			"LabelFromKey": {
				Summary: "specifies a label which will be added to the metric having the object's key as value.",
				Details: "",
			},
		},
	}
}

func (labelFromPathMarker) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "Metrics",
		DetailedHelp: markers.DetailedHelp{
			Summary: "specifies additional labels for all metrics of this field or type.",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "specifies the name of the label.",
				Details: "",
			},
			"JSONPath": {
				Summary: "specifies the relative path to the value for the label.",
				Details: "",
			},
		},
	}
}

func (stateSetMarker) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "Metric type StateSet",
		DetailedHelp: markers.DetailedHelp{
			Summary: "defines a StateSet metric and uses the implicit path to the field as path for the metric configuration.",
			Details: "A StateSet is a metric which represent a series of related boolean values, also called a bitset.\nRef: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#stateset",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "specifies the Name of the metric.",
				Details: "",
			},
			"MetricHelp": {
				Summary: "specifies the help text for the metric.",
				Details: "",
			},
			"LabelsFromPath": {
				Summary: "specifies additional labels where the value is taken from the given JSONPath.",
				Details: "",
			},
			"List": {
				Summary: "specifies a list of values to compare the given JSONPath against.",
				Details: "",
			},
			"LabelName": {
				Summary: "specifies the key of the label which is used for each entry in List to expose the value.",
				Details: "",
			},
			"JSONPath": {
				Summary: "specifies the path to the field which gets used as value to compare against the list for equality.",
				Details: "Note: This field directly maps to the valueFrom field in the custom resource configuration.",
			},
		},
	}
}
