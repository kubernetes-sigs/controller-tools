apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: oneofs.testdata.kubebuilder.io
spec:
  group: testdata.kubebuilder.io
  names:
    kind: Oneof
    listKind: OneofList
    plural: oneofs
    singular: oneof
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Oneof is the Schema for the Oneof API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: OneofSpec is the spec for the oneofs API.
            properties:
              firstTypeWithExactOneof:
                properties:
                  bar:
                    type: string
                  foo:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: exactly one of the fields in [foo bar] must be set
                  rule: '[has(self.foo),has(self.bar)].filter(x,x==true).size() ==
                    1'
              firstTypeWithOneof:
                properties:
                  bar:
                    type: string
                  foo:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: only one of foo|bar may be set
                  rule: '!(has(self.foo) && has(self.bar))'
                - message: at most one of the fields in [foo bar] may be set
                  rule: '[has(self.foo),has(self.bar)].filter(x,x==true).size() <=
                    1'
              secondTypeWithExactOneof:
                properties:
                  a:
                    type: string
                  b:
                    type: string
                  c:
                    type: string
                  d:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: exactly one of the fields in [a b] must be set
                  rule: '[has(self.a),has(self.b)].filter(x,x==true).size() == 1'
                - message: exactly one of the fields in [c d] must be set
                  rule: '[has(self.c),has(self.d)].filter(x,x==true).size() == 1'
              secondTypeWithOneof:
                properties:
                  a:
                    type: string
                  b:
                    type: string
                  c:
                    type: string
                  d:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: at most one of the fields in [a b] may be set
                  rule: '[has(self.a),has(self.b)].filter(x,x==true).size() <= 1'
                - message: at most one of the fields in [c d] may be set
                  rule: '[has(self.c),has(self.d)].filter(x,x==true).size() <= 1'
              typeWithAllOneOf:
                properties:
                  a:
                    type: string
                  b:
                    type: string
                  c:
                    type: string
                  d:
                    type: string
                  e:
                    type: string
                  f:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: at most one of the fields in [a b] may be set
                  rule: '[has(self.a),has(self.b)].filter(x,x==true).size() <= 1'
                - message: exactly one of the fields in [c d] must be set
                  rule: '[has(self.c),has(self.d)].filter(x,x==true).size() == 1'
                - message: at least one of the fields in [e f] must be set
                  rule: '[has(self.e),has(self.f)].filter(x,x==true).size() >= 1'
              typeWithMultipleAtLeastOneOf:
                properties:
                  a:
                    type: string
                  b:
                    type: string
                  c:
                    type: string
                  d:
                    type: string
                type: object
                x-kubernetes-validations:
                - message: at least one of the fields in [a b] must be set
                  rule: '[has(self.a),has(self.b)].filter(x,x==true).size() >= 1'
                - message: at least one of the fields in [c d] must be set
                  rule: '[has(self.c),has(self.d)].filter(x,x==true).size() >= 1'
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
