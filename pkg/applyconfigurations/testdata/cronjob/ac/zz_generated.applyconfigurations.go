//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package testdata

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1beta1 "k8s.io/client-go/applyconfigurations/batch/v1beta1"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
	applyconfigurationsmetav1 "k8s.io/client-go/applyconfigurations/meta/v1"
	cronjob "sigs.k8s.io/controller-tools/pkg/applyconfigurations/testdata/cronjob"
)

// AssociativeTypeApplyConfiguration represents a declarative configuration of the AssociativeType type for use
// with apply.
type AssociativeTypeApplyConfiguration struct {
	Name      *string `json:"name,omitempty"`
	Secondary *int    `json:"secondary,omitempty"`
	Foo       *string `json:"foo,omitempty"`
}

// WithName sets the Name field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) WithName(value string) *AssociativeTypeApplyConfiguration {
	b.Name = &value
	return b
}

// WithSecondary sets the Secondary field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) WithSecondary(value int) *AssociativeTypeApplyConfiguration {
	b.Secondary = &value
	return b
}

// WithFoo sets the Foo field in the declarative configuration to the given value
func (b *AssociativeTypeApplyConfiguration) WithFoo(value string) *AssociativeTypeApplyConfiguration {
	b.Foo = &value
	return b
}

// AssociativeTypeApplyConfiguration represents a declarative configuration of the AssociativeType type for use
// with apply.
func AssociativeType() *AssociativeTypeApplyConfiguration {
	return &AssociativeTypeApplyConfiguration{}
}

// CronJobApplyConfiguration represents a declarative configuration of the CronJob type for use
// with apply.
type CronJobApplyConfiguration struct {
	applyconfigurationsmetav1.TypeMetaApplyConfiguration    `json:",inline"`
	*applyconfigurationsmetav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                                    *CronJobSpecApplyConfiguration   `json:"spec,omitempty"`
	Status                                                  *CronJobStatusApplyConfiguration `json:"status,omitempty"`
}

// WithSpec sets the Spec field in the declarative configuration to the given value
func (b *CronJobApplyConfiguration) WithSpec(value *CronJobSpecApplyConfiguration) *CronJobApplyConfiguration {
	b.Spec = value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
func (b *CronJobApplyConfiguration) WithStatus(value *CronJobStatusApplyConfiguration) *CronJobApplyConfiguration {
	b.Status = value
	return b
}

// CronJobApplyConfiguration represents a declarative configuration of the CronJob type for use
// with apply.
func CronJob(name, namespace string) *CronJobApplyConfiguration {
	ac := &CronJobApplyConfiguration{}
	ac.WithName(name)
	ac.WithNamespace(namespace)
	ac.WithKind("CronJob")
	ac.WithAPIVersion("testdata.kubebuilder.io/v1")
	return ac
}
func (ac *CronJobApplyConfiguration) WithKind(value string) *CronJobApplyConfiguration {
	ac.Kind = &value
	return ac
}
func (ac *CronJobApplyConfiguration) WithAPIVersion(value string) *CronJobApplyConfiguration {
	ac.APIVersion = &value
	return ac
}
func (ac *CronJobApplyConfiguration) ensureObjectMetaApplyConfigurationExists() {
	if ac.ObjectMetaApplyConfiguration == nil {
		ac.ObjectMetaApplyConfiguration = &applyconfigurationsmetav1.ObjectMetaApplyConfiguration{}
	}
}
func (ac *CronJobApplyConfiguration) WithName(value string) *CronJobApplyConfiguration {
	ac.ensureObjectMetaApplyConfigurationExists()
	ac.Name = &value
	return ac
}
func (ac *CronJobApplyConfiguration) WithNamespace(value string) *CronJobApplyConfiguration {
	ac.Namespace = &value
	return ac
}
func (ac *CronJobApplyConfiguration) GetName() string {
	ac.ensureObjectMetaApplyConfigurationExists()
	return *ac.Name
}
func (ac *CronJobApplyConfiguration) GetNamespace() string {
	ac.ensureObjectMetaApplyConfigurationExists()
	return *ac.Namespace
}

// CronJobSpecApplyConfiguration represents a declarative configuration of the CronJobSpec type for use
// with apply.
type CronJobSpecApplyConfiguration struct {
	Schedule                   *string                                    `json:"schedule,omitempty"`
	StartingDeadlineSeconds    *int64                                     `json:"startingDeadlineSeconds,omitempty"`
	ConcurrencyPolicy          *cronjob.ConcurrencyPolicy                 `json:"concurrencyPolicy,omitempty"`
	Suspend                    *bool                                      `json:"suspend,omitempty"`
	BinaryName                 []byte                                     `json:"binaryName,omitempty"`
	CanBeNull                  *string                                    `json:"canBeNull,omitempty"`
	JobTemplate                *v1beta1.JobTemplateSpecApplyConfiguration `json:"jobTemplate,omitempty"`
	SuccessfulJobsHistoryLimit *int32                                     `json:"successfulJobsHistoryLimit,omitempty"`
	FailedJobsHistoryLimit     *int32                                     `json:"failedJobsHistoryLimit,omitempty"`
	StringSliceData            map[string][]string                        `json:"stringSliceData,omitempty"`
	PtrData                    map[string]*string                         `json:"ptrData,omitempty"`
	Slice                      []string                                   `json:"slice,omitempty"`
	SlicePtr                   []*string                                  `json:"slicePtr,omitempty"`
	SliceStruct                []*ExampleStructApplyConfiguration         `json:"sliceStruct,omitempty"`
	BuiltInReference           *v1.PodSpecApplyConfiguration              `json:"builtInReference,omitempty"`
	Int                        *int                                       `json:"int,omitempty"`
	AssociativeList            []AssociativeTypeApplyConfiguration        `json:"associativeList,omitempty"`
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSchedule(value string) *CronJobSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithStartingDeadlineSeconds sets the StartingDeadlineSeconds field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithStartingDeadlineSeconds(value *int64) *CronJobSpecApplyConfiguration {
	b.StartingDeadlineSeconds = value
	return b
}

// WithConcurrencyPolicy sets the ConcurrencyPolicy field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithConcurrencyPolicy(value cronjob.ConcurrencyPolicy) *CronJobSpecApplyConfiguration {
	b.ConcurrencyPolicy = &value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSuspend(value *bool) *CronJobSpecApplyConfiguration {
	b.Suspend = value
	return b
}

// WithInternalData sets the InternalData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithInternalData(value string) *CronJobSpecApplyConfiguration {
	return b
}

// WithBinaryName sets the BinaryName field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithBinaryName(values ...byte) *CronJobSpecApplyConfiguration {
	for i := range values {
		b.BinaryName = append(b.BinaryName, values[i])
	}
	return b
}

// WithCanBeNull sets the CanBeNull field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithCanBeNull(value string) *CronJobSpecApplyConfiguration {
	b.CanBeNull = &value
	return b
}

// WithJobTemplate sets the JobTemplate field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithJobTemplate(value *v1beta1.JobTemplateSpecApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.JobTemplate = value
	return b
}

// WithSuccessfulJobsHistoryLimit sets the SuccessfulJobsHistoryLimit field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSuccessfulJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.SuccessfulJobsHistoryLimit = value
	return b
}

// WithFailedJobsHistoryLimit sets the FailedJobsHistoryLimit field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithFailedJobsHistoryLimit(value *int32) *CronJobSpecApplyConfiguration {
	b.FailedJobsHistoryLimit = value
	return b
}

// WithStringSliceData sets the StringSliceData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithStringSliceData(entries map[string][]string) *CronJobSpecApplyConfiguration {
	if b.StringSliceData == nil && len(entries) > 0 {
		b.StringSliceData = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.StringSliceData[k] = v
	}
	return b
}

// WithPtrData sets the PtrData field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithPtrData(entries map[string]*string) *CronJobSpecApplyConfiguration {
	if b.PtrData == nil && len(entries) > 0 {
		b.PtrData = make(map[string]*string, len(entries))
	}
	for k, v := range entries {
		b.PtrData[k] = v
	}
	return b
}

// WithSlice sets the Slice field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSlice(values ...string) *CronJobSpecApplyConfiguration {
	for i := range values {
		b.Slice = append(b.Slice, values[i])
	}
	return b
}

// WithSlicePtr sets the SlicePtr field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSlicePtr(values ...*string) *CronJobSpecApplyConfiguration {
	for i := range values {
		b.SlicePtr = append(b.SlicePtr, values[i])
	}
	return b
}

// WithSliceStruct sets the SliceStruct field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithSliceStruct(values ...*ExampleStructApplyConfiguration) *CronJobSpecApplyConfiguration {
	for i := range values {
		b.SliceStruct = append(b.SliceStruct, values[i])
	}
	return b
}

// WithBuiltInReference sets the BuiltInReference field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithBuiltInReference(value *v1.PodSpecApplyConfiguration) *CronJobSpecApplyConfiguration {
	b.BuiltInReference = value
	return b
}

// WithInt sets the Int field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithInt(value int) *CronJobSpecApplyConfiguration {
	b.Int = &value
	return b
}

// WithAssociativeList sets the AssociativeList field in the declarative configuration to the given value
func (b *CronJobSpecApplyConfiguration) WithAssociativeList(values ...AssociativeTypeApplyConfiguration) *CronJobSpecApplyConfiguration {
	for i := range values {
		b.AssociativeList = append(b.AssociativeList, values[i])
	}
	return b
}

// CronJobSpecApplyConfiguration represents a declarative configuration of the CronJobSpec type for use
// with apply.
func CronJobSpec() *CronJobSpecApplyConfiguration {
	return &CronJobSpecApplyConfiguration{}
}

// CronJobStatusApplyConfiguration represents a declarative configuration of the CronJobStatus type for use
// with apply.
type CronJobStatusApplyConfiguration struct {
	Active                []v1.ObjectReferenceApplyConfiguration `json:"active,omitempty"`
	LastScheduleTime      *metav1.Time                           `json:"lastScheduleTime,omitempty"`
	LastScheduleMicroTime *metav1.MicroTime                      `json:"lastScheduleMicroTime,omitempty"`
}

// WithActive sets the Active field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) WithActive(values ...v1.ObjectReferenceApplyConfiguration) *CronJobStatusApplyConfiguration {
	for i := range values {
		b.Active = append(b.Active, values[i])
	}
	return b
}

// WithLastScheduleTime sets the LastScheduleTime field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) WithLastScheduleTime(value *metav1.Time) *CronJobStatusApplyConfiguration {
	b.LastScheduleTime = value
	return b
}

// WithLastScheduleMicroTime sets the LastScheduleMicroTime field in the declarative configuration to the given value
func (b *CronJobStatusApplyConfiguration) WithLastScheduleMicroTime(value *metav1.MicroTime) *CronJobStatusApplyConfiguration {
	b.LastScheduleMicroTime = value
	return b
}

// CronJobStatusApplyConfiguration represents a declarative configuration of the CronJobStatus type for use
// with apply.
func CronJobStatus() *CronJobStatusApplyConfiguration {
	return &CronJobStatusApplyConfiguration{}
}

// ExampleStructApplyConfiguration represents a declarative configuration of the ExampleStruct type for use
// with apply.
type ExampleStructApplyConfiguration struct {
	ExampleField *string `json:"string,omitempty"`
}

// WithExampleField sets the ExampleField field in the declarative configuration to the given value
func (b *ExampleStructApplyConfiguration) WithExampleField(value string) *ExampleStructApplyConfiguration {
	b.ExampleField = &value
	return b
}

// ExampleStructApplyConfiguration represents a declarative configuration of the ExampleStruct type for use
// with apply.
func ExampleStruct() *ExampleStructApplyConfiguration {
	return &ExampleStructApplyConfiguration{}
}
